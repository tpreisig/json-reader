// src/jsonViewer.ts

interface JsonNode {
  [key: string]: JsonValue;
}

type JsonValue = string | number | boolean | null | JsonNode | JsonValue[];

function parseAndDisplayJson(): void {
  const jsonInput = (document.getElementById('jsonInput') as HTMLTextAreaElement).value;
  const jsonViewer = document.getElementById('jsonViewer') as HTMLDivElement;

  try {
    const jsonObj: JsonValue = JSON.parse(jsonInput);
    jsonViewer.innerHTML = '';
    buildTree(jsonObj, jsonViewer, 'root');
  } catch (e: unknown) {
    const error = e instanceof Error ? e.message : 'Unknown error';
    jsonViewer.innerHTML = `<p style="color: red;">Invalid JSON: ${error}</p>`;
  }
}

function buildTree(obj: JsonValue, parentElement: HTMLElement, key: string): void {
  const item = document.createElement('div');
  parentElement.appendChild(item);

  if (typeof obj === 'object' && obj !== null) {
    const keySpan = document.createElement('span');
    keySpan.className = 'key collapsible';
    keySpan.textContent = `${key}: `;
    item.appendChild(keySpan);

    const childContainer = document.createElement('div');
    childContainer.className = `hidden ${Array.isArray(obj) ? 'array' : 'object'}`;
    item.appendChild(childContainer);

    const keys = Object.keys(obj);
    for (const childKey of keys) {
      buildTree((obj as JsonNode)[childKey], childContainer, childKey);
    }

    keySpan.addEventListener('click', (event: Event) => {
      event.stopPropagation();
      const childDiv = keySpan.parentElement?.querySelector('.hidden') as HTMLDivElement;
      if (childDiv.style.display === 'block') {
        childDiv.style.display = 'none';
        keySpan.classList.remove('collapsed');
      } else {
        childDiv.style.display = 'block';
        keySpan.classList.add('collapsed');
      }
    });
  } else {
    item.innerHTML = `<span class="key">${key}: </span><span class="${getType(obj)}">${String(obj)}</span>`;
  }
}

function getType(value: JsonValue): string {
  if (typeof value === 'string') return 'string';
  if (typeof value === 'number') return 'number';
  if (typeof value === 'boolean') return 'boolean';
  if (value === null) return 'null';
  if (Array.isArray(value)) return 'array';
  if (typeof value === 'object') return 'object';
  return 'unknown';
}

function setupFileInput(): void {
  const fileInput = document.getElementById('fileInput') as HTMLInputElement;
  fileInput.addEventListener('change', (event: Event) => {
    const target = event.target as HTMLInputElement;
    const file = target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e: ProgressEvent<FileReader>) => {
      const fileContent = e.target?.result as string;
      (document.getElementById('jsonInput') as HTMLTextAreaElement).value = fileContent;
      parseAndDisplayJson();
    };
    reader.readAsText(file);
  });
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
  setupFileInput();
  // Optionally, parse initial content if present
  parseAndDisplayJson();
});

export { parseAndDisplayJson }; // Export for external use if needed